#!/usr/bin/python

"""
Example known_hosts.ini

[known_hosts]
url = http://puppetdb.mydomain.com:8080/v3/
dns_matching =
    mydomain.com$
    home$
ip_matching = ^(?!172.)

"""
from os import path
import ConfigParser
import logging
import os
import re
import requests
import socket

log = logging.getLogger(__file__)

URL = ''
hosts = []


def get_fact(fqdn, fact):
    URL = API + 'nodes/%s/facts/%s' % (fqdn, fact)
    resp = requests.get(URL).json()
    if resp:
        return resp[0]['value']
    else:
        return ''


def get_hosts(dns_matching=[]):
    for host in hosts:
        fqdn = host['name']
        for regex in dns_matching:
            search = re.search(regex, fqdn)
            if search:
                break
        else:
            log.debug("Skipping: %s doesn't match any %s" % (fqdn, dns_matching))
            continue
        key = get_fact(fqdn, 'sshecdsakey')
        private_ip = get_fact(fqdn, 'ipaddress_private')
        if not private_ip.startswith('172.26'):
            private_ip = get_fact(fqdn, 'ipaddress')
            log.debug("Address isn't in our private management network %s." % private_ip)
        else:
            # Try to use the private ip address to find the hostname
            try:
                hostname = socket.gethostbyaddr(private_ip)[0]
                fqdn = hostname
            except:
                log.debug("%s: Reverse lookup of %s failed." % (fqdn, private_ip))
                pass
        yield ' '.join((','.join ((fqdn, private_ip)),
                        'ecdsa-sha2-nistp256', key))


if '__main__' == __name__:
    import argparse

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Generate a known hosts file from puppetdb')
    parser.add_argument(
        '-v', '--verbose', action='count', default=0,
        help="Increase verbosity (specify multiple times for more)")

    args = parser.parse_args()

    log_level = logging.WARNING
    if args.verbose == 1:
        log_level = logging.INFO
    elif args.verbose >= 2:
        log_level = logging.DEBUG

    logging.basicConfig(
        level=log_level,
        format='%(asctime)s %(name)s %(levelname)s %(message)s')

    user = os.environ.get('SUDO_USER') or os.environ.get('USER')

    config = ConfigParser.RawConfigParser()
    config.read(path.expanduser('~%s/.known_hosts.ini' % user))
    dns = [c for c in config.get('known_hosts', 'dns_matching').split('\n')
           if c]
    API = config.get('known_hosts', 'url')

    resp = requests.get(API + 'nodes', params={'query': '["=", ["node", "active"], true]'})
    hosts = resp.json()
    # run program
    with open('/etc/ssh/ssh_known_hosts', 'w') as known_hosts_file:
        for host in get_hosts(dns):
            known_hosts_file.write(host + '\n')
